#include <TRandom3.h>
#include <TMath.h>
#include <TLorentzVector.h>
#include <iostream>
using namespace std;


void Lorentz()
{
	
	Double_t xPrime=1;
	Double_t yPrime=2;
	Double_t zPrime=3;
	Double_t tPrime=1;
	TVector3 PosPrime(xPrime, yPrime, zPrime);
	TLorentzVector PosVect(xPrime, yPrime, zPrime, tPrime);	
	
	Double_t vx=0.5;
	Double_t vy=0;
	Double_t vz=0;
	TVector3 vel(vx, vy, vz);

	Double_t beta = vel.Mag();
	Double_t gamma = 1/sqrt(1-beta*beta);	
	
	TVector3 Pos = PosPrime + (gamma-1)/(beta*beta)*(vel*PosPrime)*vel + gamma*tPrime*vel;
	Double_t t= gamma*(tPrime+PosPrime*vel);
	PosVect.Boost(vel);
	
	cout << " My Function " << endl;
	cout << " x=" << Pos.X() << endl;
	cout << " y=" << Pos.Y() << endl;
	cout << " z=" << Pos.Z() << endl;
	cout << " t=" << t << endl;

	cout << " Root Function " << endl;
	cout << " x=" << PosVect.X() << endl;
	cout << " y=" << PosVect.Y() << endl;
	cout << " z=" << PosVect.Z() << endl;
	cout << " t=" << PosVect.T() << endl;

	
}
